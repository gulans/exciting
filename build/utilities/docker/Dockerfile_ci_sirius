# Dockerfile for exciting plus Sirius dependencies.
#
# * Build (from directory containing Dockerfile, else replace . with path/2/Dockerfile)
#  docker build -t sirius-cpu:develop-may2023 .
#
# * Run natively
#   docker run --entrypoint bash -it sirius-cpu:develop-may2023
#
#  Building on Mac M1 and newer
#  * Note, target=x86_64 will fail unless building docker in emulation mode.
#  * Removing the target option may also fail, unless one specifies the Ubuntu package architecture
#    AND the requested packages are available for the specified architecture.
#    For example:
#      FROM --platform=linux/amd64 ubuntu:focal
#      RUN dpkg --add-architecture amd64
#      RUN apt update -o APT::Architecture="amd64"
FROM ubuntu:focal

ENV DEBIAN_FRONTEND noninteractive

# Lowest-level Build Dependencies
RUN \
 apt-get update && \
 apt-get install -y apt-utils gcc g++ gfortran git make unzip \
 wget pkg-config python3-pip curl tcl m4 cpio hwloc automake \
 xsltproc libomp-dev

# Library dependencies which are slow to build with spack
RUN apt-get update && apt-get install -y mpich libhdf5-cpp-103 libhdf5-mpich-103 libhdf5-mpich-dev libxc-dev

RUN pip install cmake==3.24.1

# Install spack
RUN git clone -c feature.manyFiles=true https://github.com/spack/spack.git

# Place output of source setup-env.sh into a dir executed by the login shell,
# and ensure all subsequent RUN commands invoke the login shell (the default shell is not a login shell).
# https://stackoverflow.com/questions/20635472/using-the-run-instruction-in-a-dockerfile-with-source-does-not-work
# https://stackoverflow.com/questions/38024160/how-to-get-etc-profile-to-run-automatically-in-alpine-docker/44581167

RUN echo "source /spack/share/spack/setup-env.sh" >> /etc/profile.d/spack.sh
SHELL ["/bin/bash", "--login", "-c"]

RUN /spack/bin/spack compiler find
RUN /spack/bin/spack external find

# Sirius build specification, at commit: 38988070cda2772f79892f079803875d4835d117
ENV SPEC="sirius@develop %gcc@9.4.0 build_type=Release +scalapack +fortran ^mpich@3.3.2 ^intel-oneapi-mkl+cluster ^spfft target=x86_64"

# Install sirius dependencies
RUN /spack/bin/spack install --fresh --only=dependencies $SPEC

# Sirius installation location
ENV SIRIUS_ROOT=spack-sirius-install

# Location of sirius env `spack.yaml`
ENV SIRIUS_ENV=spack-sirius-env

# Create an environment
RUN /spack/bin/spack env create --with-view $SIRIUS_ROOT $SIRIUS_ENV
RUN /spack/bin/spack -e $SIRIUS_ENV add $SPEC

# exciting test suite dependencies
RUN apt-get update && apt-get install -y python3.8-full python3.8-venv
RUN pip install termcolor lxml pytest pyyaml pytest-cov xmlschema
