# Python frameworks on which exciting depends
# * excitingtools 
# * Regression testing framework

python:excitingtools-python-3.7:
  image: gitdocker.physik.hu-berlin.de/sol/exciting:debian-buster-GCC8-April2022
  stage: python
  tags:
    - docker
  before_script:
    - python3 -m pip install -U pip setuptools
    - python3 -m pip install --upgrade --force pylint coverage xmlschema
  script:
    - cd tools/exciting_tools && python3 -m pip install .
    # Run excitingtools unit tests and collect test coverage
    - coverage run -m pytest
    - coverage xml -o excitingtools_testcov.xml
  after_script:
    # Run pylint on all modified python files
    - sh .gitlab/run_pylint.sh $CI_BUILD_REF_NAME
    # Run the schema parsing to detect changes
    - sh .gitlab/run_schema_parsing.sh
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: tools/exciting_tools/excitingtools_testcov.xml

python:regressionframework-python-3.7:
  image: gitdocker.physik.hu-berlin.de/sol/exciting:debian-buster-GCC8-April2022
  stage: python
  tags:
    - docker
  before_script:
   # - apt-get --allow-releaseinfo-change update && apt-get install -y libpython3.7 libpython3.7-dev python3-pip
   # - python3.7 -m pip install --upgrade --force coverage
    - python3 -m pip install -U pip setuptools
    - python3 -m pip install coverage
    - python3 -m pip install tools/exciting_tools
  script:
    - cd test/ && coverage run -m pytest test_functions/
    - coverage report > testframework_testcov.txt
  artifacts:
    paths:
      - test/testframework_testcov.txt

# Tokens and passwords should be stored as ENV VARs on Gitlab, not in readable form in the repo.
variables:
  PYPI_TOKEN: $excitingtools_pypi

deploy:excitingtools-pypi:
  image: gitdocker.physik.hu-berlin.de/sol/exciting:debian-buster-GCC8-April2022
  stage: deploy
  tags:
    - docker
  script:
    - cd tools/exciting_tools
    - >
      if [[ -n $(git diff origin/development HEAD -- pyproject.toml | grep '+version') ]]; then
        echo "excitingtools version has been bumped. Pushing to pypi"
        pip3 install -U pip build twine
        python3 -m build
        twine upload --skip-existing --non-interactive --username __token__ --password $PYPI_TOKEN dist/*
      else
        echo "pyproject.toml has changed but the version number has not, so do not push to pypi"
      fi
  rules:
    # Only deploy when a feature is merged, not each time the pipeline passes
    - if: '$CI_COMMIT_REF_NAME == "development"'
