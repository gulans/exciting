"""
Module containing default tolerances for ground state output.

All unique {keys:tolerances} for ground state outputs.
Each entry has a unique key and value = {'tolerance':value, 'unit':Unit.unit}
where Unit is an enum class.  If a quantity does not have an associated unit,
unit = null.

Keys were generated by using the tolerance.py script. See that for command line details.

Tolerances in default_tolerances cover files:
  * INFO.OUT
  * eigval.xml
  * atoms.xml
  * geometry.xml
  * evalcore.xml
  * Ideally one symmetry file                           TODO(Alex/Bene/Hannah) Issue 78. Expand test coverage.
  * Bond length.BONDLENGTH.OUT does not have a parser.  TODO(Alex/Bene/Hannah) Issue 78. Expand test coverage.
"""
from excitingtools import Unit

# currentdir = os.path.dirname(os.path.realpath(__file__))
# parentdir = os.path.dirname(currentdir)
# sys.path.append(os.path.dirname(parentdir))
#
# from tolerance.tol_classes import DefaultTolerances, Tol, TolWithMessage

from ..tol_classes import DefaultTolerances, Tol, TolWithMessage

# Default ground state tolerances
# -------------------------------
# Ground state tests present when determining default tolerances:
# PBE-msec-Al, PBE-lin-Al, LDA_VWN-msec-iora-Ar, LDA_VWN-He, LDA_PW-PbTiO3, LDA_PW-collinear-Fe, LDA_PW-noncollinear-Fe,
# LDA_VWN-Ar, LDA_VWN-nonrelativistic-Ar, LDA_VWN-zora-Ar, PBE-Al, PBE-arpack_npacked-Al, PBE-arpack_packed-Al, PBE-pulay-Al
#
# Total energy tolerance is set to 1.e-8 Ha.
# Individual energy terms are more sensitive changes in the density than the total energy.
# As such, all other energy floats in INFO.OUT are specified to default.energy = 1.e-7.
# This is because we have observed some variation ~ 1.e-7 for GCC serial calculations vs Intel serial reference data.
# At the time of generating reference data, Intel serial meant exciting serial + threaded MKL.
# We speculate the differences are therefore due to the accumulation of numerical errors in the linear algebra.
# If 1.e-7 is still too tight, try ~ 5.e-7. Energy tolerances >= 1.e-6 Ha should be questioned.
# All other floats are written to 1.e-8 precision in INFO.OUT, with the exception of the real/recip lattice vectors,
# which have higher precision.
default = DefaultTolerances(integer=Tol(0),
                            float=Tol(1.e-8),
                            str=Tol(''),
                            total_energy=Tol(1.e-8, Unit.hartree),
                            energy=Tol(1.e-7, Unit.hartree),
                            length=Tol(1.e-8, Unit.bohr),
                            volume=Tol(1.e-8, Unit.bohr_pow_3),
                            inv_length=Tol(1.e-8, Unit.inv_bohr),
                            inv_volume=Tol(1.e-8, Unit.inv_bohr_pow_3),
                            frequency=Tol(1.e-8, Unit.bohr_velocity_over_bohr_radius),
                            temperature=Tol(1.e-8, Unit.kelvin),
                            angle=(1.e-8, Unit.degrees)
                            )


# Details on the quantities in info_out.
# --------------------------------------
# Quantities that vary with the SCF loop have the same tolerance per iteration, and
# their keys therefore only appear once.

# Species-specific info is not present as it depends upon input. For example:
# Species : 1 (Ar)
#   parameters loaded from   : Ar.xml
#   ...
# The other quantity that is species-specific (and we ignore below) is the charge
# in each muffin-tin
#      charge in muffin-tin spheres :
#                   atom     1    Ar          :        17.99816103
# however we do test 'total charge in muffin-tins', which is `probably` sufficient to
# catch any issue.

# Some keys are associated with nested dictionaries, and are not clear. An example of one such key is:
#  {'Maximum angular momentum used for' : {'APW functions': value,
#                                          'computing H and O matrix elements': value
#                                          ... }
#  }
# where the inner nested keys are listed below as 'APW functions', 'computing H and O matrix elements', ...
# Hence the use of the TolWithMessage, which allows a comment to be added in the JSON file to elaborate on the
# meaning of the key. In the future, this can be avoided through better design of the respective parser.

info_out = {
    'Lattice vectors (cartesian)': default.length,
    'Reciprocal lattice vectors (cartesian)': default.inv_length,
    'Unit cell volume': default.volume,
    'Brillouin zone volume': default.inv_volume,
    'Total number of atoms per unit cell':  default.integer,
    'Number of Bravais lattice symmetries':  default.integer,
    'Number of crystal symmetries':  default.integer,
    'k-point grid':  default.integer,
    'Total number of k-points':  default.integer,
    'Spin treatment': default.str,
    'Smearing scheme': default.str,
    'R^MT_min * |G+k|_max (rgkmax)':  default.energy,
    'Maximum |G+k| for APW functions':  default.energy,
    'Maximum |G| for potential and density':  default.energy,
    'Polynomial order for pseudochg. density':  default.integer,
    'G-vector grid sizes':  default.integer,
    'Total number of G-vectors':  default.integer,
    'APW functions': TolWithMessage(default.integer, message="Key prefix 'Maximum angular momentum used for'"),
    'computing H and O matrix elements':  TolWithMessage(default.integer, message="Key prefix 'Maximum angular momentum used for'"),
    'potential and density':  TolWithMessage(default.integer, message="Key prefix 'Maximum angular momentum used for'"),
    'inner part of muffin-tin':  TolWithMessage(default.integer, message="Key prefix 'Maximum angular momentum used for'"),
    'Total nuclear charge':  default.energy,
    'Total electronic charge':  default.energy,
    'Total core charge':  default.energy,
    'Total valence charge':  default.energy,
    'Effective Wigner radius, r_s':  default.energy,
    'Number of empty states':  default.integer,
    'Total number of valence states':  default.integer,
    'Maximum Hamiltonian size':  default.integer,
    'Maximum number of plane-waves':  default.integer,
    'Total number of local-orbitals':  default.integer,
    'Exchange-correlation type': TolWithMessage(default.integer, message="XC type denoted by integer, so the integer tolerance is 0"),
    'Smearing width':  default.energy,
    'Total energy':  default.total_energy,
    'Fermi energy':  default.energy,
    'Kinetic energy':  default.energy,
    'Coulomb energy':  default.energy,
    'Exchange energy':  default.energy,
    'Correlation energy':  default.energy,
    'Sum of eigenvalues':  default.energy,
    'Effective potential energy':  default.energy,
    'Coulomb potential energy':  default.energy,
    'xc potential energy':  default.energy,
    'Hartree energy':  default.energy,
    'Electron-nuclear energy':  default.energy,
    'Nuclear-nuclear energy':  default.energy,
    'Madelung energy':  default.energy,
    'Core-electron kinetic energy':  default.energy,
    'DOS at Fermi energy (states/Ha/cell)':  default.energy,
    'core':  TolWithMessage(default.energy, message="Key prefix 'Electron charges'"),
    'core leakage':  TolWithMessage(default.energy, message="Key prefix 'Electron charges'"),
    'valence':  TolWithMessage(default.energy, message="Key prefix 'Electron charges'"),
    'interstitial':  TolWithMessage(default.energy, message="Key prefix 'Electron charges'"),
    'total charge in muffin-tins':  default.energy,
    'total charge':  default.energy,
    'Estimated fundamental gap':  default.energy
}

# eigval.xml
eigval = {'eigenvalue': default.energy,
          'occupancy': default.float
          }

# evalcore.xml
evalcore = {'n': default.integer,
            'l': default.integer,
            'k': default.integer,
            'eigenvalue': default.energy
            }

# atoms.xml
atoms = {'RelativityModel': default.str,
         'chemicalSymbol': default.str,
         'GridType': default.str,
         'xctype': default.integer,
         'TotalNumberOfGridPoints': default.integer,
         'NumberOfMTGridPoints': default.integer,
         'rmin': TolWithMessage(1.e-10, Unit.bohr,
                                "rmin can be very small. Should set the tolerance to the smallest plausible value"),
         'rmt': default.length,
         'rmax':default.length,
         'n': default.integer,
         'l': default.integer,
         'kappa': default.integer,
         'energy': default.energy
         }

# geometry.xml
# Ignores the speciespath, species types and the associated atomic positions
geometry = {'1': default.length,
            '2': default.length,
            '3': default.length,
            'rmt': default.length
            }

# Single dictionary for all tested ground state outputs, for dumping to JSON
ground_state_tolerances = {'INFO.OUT': info_out,
                           'eigval.xml': eigval,
                           'evalcore.xml': evalcore,
                           'atoms.xml': atoms,
                           'geometry.xml': geometry}
